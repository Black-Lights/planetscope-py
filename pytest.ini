[tool:pytest]
# Pytest configuration for planetscope-py v4.0.0
# Phase 4: Enhanced Temporal Analysis & Asset Management

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=planetscope_py
    --cov-report=html
    --cov-report=term-missing
    --cov-fail-under=90

# Minimum version requirements
minversion = 8.0

# Markers for test categorization
markers =
    # Core functionality tests
    unit: Unit tests for individual functions
    integration: Integration tests for multiple components  
    auth: Authentication-related tests
    validation: Input validation tests
    slow: Slow-running tests that may make network calls
    network: Tests that require network access
    config: Configuration tests
    utils: Utility tests
    exceptions: Exception tests
    
    # Planet API Integration tests  
    query: Planet API query system tests
    metadata: Metadata processing tests
    rate_limit: Rate limiting and retry logic tests
    mock_api: Tests using mock Planet API
    api: Tests that require real Planet API key
    
    # Spatial Analysis Engine tests (v3.0.0)
    spatial: Spatial analysis engine tests
    density: Density calculation tests
    rasterization: Rasterization method tests
    vector_overlay: Vector overlay method tests
    adaptive_grid: Adaptive grid method tests
    performance: Performance optimization tests
    method_selection: Automatic method selection tests
    
    # Visualization tests (v3.0.0)
    visualization: Visualization and plotting tests
    export: Export functionality tests
    geotiff: GeoTIFF export tests
    plotting: Matplotlib plotting tests
    
    # Phase 4: Enhanced Temporal Analysis tests
    temporal: Temporal analysis engine tests
    temporal_gaps: Temporal gap analysis tests
    seasonal: Seasonal pattern analysis tests
    time_series: Time series analysis tests
    temporal_resolution: Temporal resolution tests
    spatiotemporal: 3D spatiotemporal data cube tests
    temporal_viz: Temporal visualization tests
    temporal_export: Temporal data export tests
    
    # Phase 4: Asset Management tests
    asset_management: Asset activation and download tests
    quota: Quota monitoring and management tests
    download: Asset download workflow tests
    activation: Asset activation tests
    user_confirmation: User interaction and confirmation tests
    download_progress: Download progress tracking tests
    retry_logic: Download retry and error recovery tests
    parallel_download: Parallel download management tests
    
    # Phase 4: GeoPackage Management tests
    geopackage: GeoPackage creation and management tests
    vector_export: Vector data export tests
    raster_integration: Raster data integration tests
    layer_management: Layer creation and styling tests
    metadata_tables: Metadata table management tests
    geopackage_validation: GeoPackage validation tests
    gis_integration: GIS software integration tests
    schema_management: Attribute schema management tests
    
    # Phase 4: Interactive Management tests
    interactive: Interactive user interface tests
    progress_tracking: Progress tracking and reporting tests
    user_interface: User interface component tests
    workflow_management: Complete workflow management tests
    
    # Performance and benchmarking
    benchmark: Performance benchmark tests
    memory: Memory usage tests
    large_dataset: Tests with large datasets
    high_resolution: High-resolution grid tests
    async_performance: Async operation performance tests

# Warning filters - suppress known dependency warnings
filterwarnings =
    # Core Python warnings
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    
    # Geospatial library warnings
    ignore::DeprecationWarning:pyogrio.*
    ignore:The 'shapely.geos' module is deprecated:DeprecationWarning:pyogrio.*
    ignore:Field format 'TIMESTAMP' not supported:RuntimeWarning:pyogrio.*
    ignore:.*shapely.*:UserWarning
    ignore:.*rasterio.*:UserWarning
    ignore:.*geopandas.*:FutureWarning
    ignore:.*fiona.*:UserWarning
    ignore:.*PROJ.*:UserWarning
    ignore:.*CRS.*:UserWarning
    ignore:.*GDAL.*:UserWarning
    
    # Visualization warnings
    ignore:.*matplotlib.*:UserWarning
    ignore:.*plotly.*:UserWarning
    ignore:.*seaborn.*:UserWarning
    
    # Async and networking warnings
    ignore:.*aiohttp.*:UserWarning
    ignore:.*asyncio.*:RuntimeWarning
    
    # Testing framework warnings
    ignore:.*mock.*:UserWarning
    ignore:.*pytest.*:PytestUnraisableExceptionWarning
    
    # Phase 4 specific warnings
    ignore:.*xarray.*:UserWarning
    ignore:.*dask.*:UserWarning
    ignore:.*temporal.*:UserWarning
    
    # Allow important warnings to show
    default::UserWarning:planetscope_py.*
    default::FutureWarning:planetscope_py.*

# Asyncio configuration for Phase 4 async tests
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Logging configuration for tests
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test timeouts for Phase 4 async operations
timeout = 300

# Coverage configuration
[coverage:run]
source = planetscope_py
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */myvenv/*
    */planetscope_clean_env/*
    */.pytest_temp/*
    */site-packages/*
    */build/*
    */dist/*
    */htmlcov/*
    */.coverage

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    
    # Phase 3 spatial analysis exclusions
    except ImportError:
    except ModuleNotFoundError:
    if not _SPATIAL_ANALYSIS_AVAILABLE:
    if not _VISUALIZATION_AVAILABLE:
    
    # Phase 4 enhanced exclusions
    if not _TEMPORAL_ANALYSIS_AVAILABLE:
    if not _ASSET_MANAGEMENT_AVAILABLE:
    if not _GEOPACKAGE_AVAILABLE:
    if not _INTERACTIVE_AVAILABLE:
    if not PYPROJ_AVAILABLE:
    if not RASTERIO_AVAILABLE:
    if not SHAPELY_AVAILABLE:
    if not GEOPACKAGE_DEPS_AVAILABLE:
    
    # Async error handling exclusions
    except asyncio.TimeoutError:
    except asyncio.CancelledError:
    except aiohttp.ClientError:

[coverage:html]
directory = htmlcov
title = PlanetScope-py v4.0.0 Phase 4 Coverage Report

[coverage:xml]
output = coverage.xml