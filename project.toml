# pyproject.toml - Minimal configuration for setup.py-based projects
[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

# Tool configurations (keep these even with setup.py)

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests that require Planet API access",
    "temporal: marks tests for temporal analysis features",
    "spatial: marks tests for spatial analysis features",
    "asset: marks tests for asset management features"
]

# Coverage configuration
[tool.coverage.run]
source = ["planetscope_py"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "venv/*",
    ".venv/*",
    "planetscope_py/_version.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "except ImportError:",
    "pass"
]
show_missing = true
precision = 2

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to false for gradual typing
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "shapely.*",
    "geopandas.*", 
    "rasterio.*",
    "fiona.*",
    "pyproj.*",
    "xarray.*",
    "contextily.*",
    "folium.*",
    "seaborn.*",
    "orjson.*",
    "aiohttp.*"
]
ignore_missing_imports = true

# Ruff configuration (modern fast linter - alternative to flake8)
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["F401", "F811"]  # Allow unused imports and redefinitions in tests